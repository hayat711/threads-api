# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResult {
  message: String
  profile: Profile
  statusCode: Int
}

input CreateNotificationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateReplyInput {
  content: String!
  image: String
  threadId: String!
}

input CreateThreadInput {
  content: String!
  image: String
  mentionUserId: String
}

input CreateUploadInput {
  desc: String!
  name: String!
}

input CreateUserInput {
  bio: String
  password: String!

  """username must be unique"""
  username: String!
}

input CredentialsInput {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Like {
  createdAt: DateTime!
  id: ID!
  replyId: String
  threadId: String
  updatedAt: DateTime!
  userId: String!
}

type MeResult {
  message: String
  profile: Profile
  statusCode: Int
}

type Mutation {
  createNotification(createNotificationInput: CreateNotificationInput!): Notification!
  createThread(createThreadInput: CreateThreadInput!): Thread!
  createUser(createUserInput: CreateUserInput!): User!
  likeReply(replyId: String!): Like!
  likeThread(threadId: String!): Like!
  login(credentialsInput: CredentialsInput!): AuthResult!
  logout: AuthResult!
  register(createUserInput: CreateUserInput!): AuthResult!
  removeLike(id: Int!): Like!
  removeLikeFromReply(replyId: String!): Like!
  removeLikeFromThread(threadId: String!): Like!
  removeNotification(id: Int!): Notification!
  removeReply(id: Int!): Reply!
  removeThread(id: Int!): Thread!
  reply(createReplyInput: CreateReplyInput!): Reply!
  updateLike(updateLikeInput: UpdateLikeInput!): Like!
  updateNotification(updateNotificationInput: UpdateNotificationInput!): Notification!
  updateReply(updateReplyInput: UpdateReplyInput!): Reply!
  updateThread(updateThreadInput: UpdateThreadInput!): Thread!
  updateUser(values: UpdateUserInput!): Profile!
  uploadFile(file: Upload, values: CreateUploadInput!): UploadResult!
}

type Notification {
  """the text of a notification"""
  content: String!
  isDismissed: Boolean!
  isRead: Boolean!
  user: User!
  userId: String!
}

type Profile {
  bio: String
  createdAt: DateTime!
  id: ID!
  isPrivate: Boolean!
  likes: [Like]!
  link: String
  mentionedThreads: [Thread]!
  password: String!
  photo: String
  replies: [Reply]!
  threads: [Thread]!
  updatedAt: DateTime!
  username: String!
  verified: Boolean!
}

type Query {
  allReplies(threadId: String!): [Reply!]!
  like(id: Int!): Like!
  likes(threadId: String!): ThreadLikeDto!
  me: MeResult!
  myThreads: [Thread!]!
  notification(id: Int!): Notification!
  reply(id: String!): Reply!
  thread(id: String!): Thread!
  threads: [Thread!]!
  user(field: String!, value: String!): User!
}

type Reply {
  author: User!
  authorId: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  image: String
  likes: [Like]!
  likesCount: Int!
  mention: Boolean
  parent: Reply
  parentId: String
  replies: [Reply]!
  repliesCount: Int!
  thread: Thread!
  threadId: String!
  updatedAt: DateTime!
}

type Thread {
  author: User!
  authorId: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  image: String
  likes: [Like]!
  likesCount: Int!
  mention: Boolean
  mentionUserId: String
  mentionUsers: [User!]
  replies: [Reply]!
  repliesCount: Int!
  updatedAt: DateTime!
}

type ThreadLikeDto {
  photo: String!
  threadId: String!
  userId: String!
  username: String!
}

input UpdateLikeInput {
  id: Int!
  threadId: String
}

input UpdateNotificationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateReplyInput {
  content: String
  id: Int!
  image: String
  threadId: String
}

input UpdateThreadInput {
  content: String
  id: Int!
  image: String
  mentionUserId: String
}

input UpdateUserInput {
  bio: String
  id: String!
  isPrivate: Boolean
  link: String
  password: String
  photo: String
  username: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadResult {
  desc: String
  imageFormatted: String
  imageRaw: String
  name: String
  url: String
}

type User {
  bio: String
  createdAt: DateTime!
  id: ID!
  isPrivate: Boolean!
  likes: [Like]!
  link: String
  mentionedThreads: [Thread]!
  password: String!
  photo: String
  replies: [Reply]!
  threads: [Thread]!
  updatedAt: DateTime!
  username: String!
  verified: Boolean!
}